class App extends React.Component {

  constructor(props) {
    super(props);
    this.state = {

      board: [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
      isFirstPlayer: true

    };
    this.onClick = this.onClick.bind(this);
  }

  onClick(col) {
    console.log('clicked!', col);

    var copyBoard = this.state.board.slice(0);
    var row = 0;
    for (var i = 0; i < copyBoard.length; i++) {
      if (copyBoard[i][col] === 0) {
        row = i;
      }
    }

    copyBoard[row][col] = this.state.isFirstPlayer ? 1 : -1;
    console.log(copyBoard);

    this.setState({
      board: copyBoard,
      isFirstPlayer: !this.state.isFirstPlayer
    });
  }

  render() {

    return React.createElement(
      'div',
      null,
      React.createElement(
        'h1',
        null,
        'CONNECT 4 TO WIN'
      ),
      React.createElement(
        'table',
        null,
        React.createElement(
          'tbody',
          null,
          React.createElement(Headers, { data: [0, 1, 2, 3, 4, 5, 6], selectColumn: this.onClick }),
          this.state.board.map((row, index) => {
            return React.createElement(Row, { data: row, row: index, selectSquare: this.onClick });
          })
        )
      )
    );
  }
}

var Headers = ({ data, selectColumn }) => React.createElement(
  'tr',
  null,
  data.map((row, index) => {
    return React.createElement(
      'th',
      { onClick: () => {
          selectColumn(index);
        } },
      index + 1
    );
  })
);

var Row = ({ data, row, selectSquare }) => React.createElement(
  'tr',
  null,
  data.map((square, index) => {
    return React.createElement(
      'td',
      { onClick: () => selectSquare(row, index) },
      square
    );
  })
);

window.App = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2FwcC5qc3giXSwibmFtZXMiOlsiQXBwIiwiUmVhY3QiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwic3RhdGUiLCJib2FyZCIsImlzRmlyc3RQbGF5ZXIiLCJvbkNsaWNrIiwiYmluZCIsImNvbCIsImNvbnNvbGUiLCJsb2ciLCJjb3B5Qm9hcmQiLCJzbGljZSIsInJvdyIsImkiLCJsZW5ndGgiLCJzZXRTdGF0ZSIsInJlbmRlciIsIm1hcCIsImluZGV4IiwiSGVhZGVycyIsImRhdGEiLCJzZWxlY3RDb2x1bW4iLCJSb3ciLCJzZWxlY3RTcXVhcmUiLCJzcXVhcmUiLCJ3aW5kb3ciXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLEdBQU4sU0FBa0JDLE1BQU1DLFNBQXhCLENBQWtDOztBQUVoQ0MsY0FBWUMsS0FBWixFQUFtQjtBQUNqQixVQUFNQSxLQUFOO0FBQ0EsU0FBS0MsS0FBTCxHQUFhOztBQUVUQyxhQUFPLENBQUMsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLEVBQVMsQ0FBVCxFQUFXLENBQVgsRUFBYSxDQUFiLENBQUQsRUFBa0IsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLEVBQVMsQ0FBVCxFQUFXLENBQVgsRUFBYSxDQUFiLENBQWxCLEVBQW1DLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxFQUFTLENBQVQsRUFBVyxDQUFYLEVBQWEsQ0FBYixDQUFuQyxFQUFtRCxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULEVBQVcsQ0FBWCxFQUFhLENBQWIsQ0FBbkQsRUFBb0UsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLEVBQVMsQ0FBVCxFQUFXLENBQVgsRUFBYSxDQUFiLENBQXBFLEVBQXFGLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxFQUFTLENBQVQsRUFBVyxDQUFYLEVBQWEsQ0FBYixDQUFyRixDQUZFO0FBR1RDLHFCQUFlOztBQUhOLEtBQWI7QUFNQSxTQUFLQyxPQUFMLEdBQWUsS0FBS0EsT0FBTCxDQUFhQyxJQUFiLENBQWtCLElBQWxCLENBQWY7QUFDRDs7QUFHREQsVUFBUUUsR0FBUixFQUFhO0FBQ1hDLFlBQVFDLEdBQVIsQ0FBWSxVQUFaLEVBQXdCRixHQUF4Qjs7QUFFQSxRQUFJRyxZQUFhLEtBQUtSLEtBQUwsQ0FBV0MsS0FBWCxDQUFpQlEsS0FBakIsQ0FBdUIsQ0FBdkIsQ0FBakI7QUFDQSxRQUFJQyxNQUFNLENBQVY7QUFDQSxTQUFLLElBQUlDLElBQUUsQ0FBWCxFQUFjQSxJQUFFSCxVQUFVSSxNQUExQixFQUFrQ0QsR0FBbEMsRUFBdUM7QUFDckMsVUFBSUgsVUFBVUcsQ0FBVixFQUFhTixHQUFiLE1BQXNCLENBQTFCLEVBQTZCO0FBQzNCSyxjQUFNQyxDQUFOO0FBQ0Q7QUFDRjs7QUFFREgsY0FBVUUsR0FBVixFQUFlTCxHQUFmLElBQXNCLEtBQUtMLEtBQUwsQ0FBV0UsYUFBWCxHQUEyQixDQUEzQixHQUErQixDQUFDLENBQXREO0FBQ0FJLFlBQVFDLEdBQVIsQ0FBWUMsU0FBWjs7QUFFQSxTQUFLSyxRQUFMLENBQWM7QUFDWlosYUFBU08sU0FERztBQUVaTixxQkFBZSxDQUFDLEtBQUtGLEtBQUwsQ0FBV0U7QUFGZixLQUFkO0FBS0Q7O0FBRURZLFdBQVM7O0FBRVAsV0FFRTtBQUFBO0FBQUE7QUFDRTtBQUFBO0FBQUE7QUFBQTtBQUFBLE9BREY7QUFHRTtBQUFBO0FBQUE7QUFDRTtBQUFBO0FBQUE7QUFDQSw4QkFBQyxPQUFELElBQVMsTUFBTSxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULEVBQVcsQ0FBWCxFQUFhLENBQWIsQ0FBZixFQUFnQyxjQUFjLEtBQUtYLE9BQW5ELEdBREE7QUFHRSxlQUFLSCxLQUFMLENBQVdDLEtBQVgsQ0FBaUJjLEdBQWpCLENBQXFCLENBQUNMLEdBQUQsRUFBTU0sS0FBTixLQUFlO0FBQ2xDLG1CQUFPLG9CQUFDLEdBQUQsSUFBSyxNQUFNTixHQUFYLEVBQWdCLEtBQUtNLEtBQXJCLEVBQTRCLGNBQWMsS0FBS2IsT0FBL0MsR0FBUDtBQUNELFdBRkQ7QUFIRjtBQURGO0FBSEYsS0FGRjtBQWtCRDtBQXZEK0I7O0FBMERsQyxJQUFJYyxVQUFVLENBQUMsRUFBQ0MsSUFBRCxFQUFPQyxZQUFQLEVBQUQsS0FFWjtBQUFBO0FBQUE7QUFHSUQsT0FBS0gsR0FBTCxDQUFTLENBQUNMLEdBQUQsRUFBTU0sS0FBTixLQUFnQjtBQUN2QixXQUFPO0FBQUE7QUFBQSxRQUFJLFNBQVUsTUFBSztBQUFDRyx1QkFBYUgsS0FBYjtBQUFvQixTQUF4QztBQUEyQ0EsY0FBTTtBQUFqRCxLQUFQO0FBQ0QsR0FGRDtBQUhKLENBRkY7O0FBY0EsSUFBSUksTUFBTSxDQUFDLEVBQUNGLElBQUQsRUFBT1IsR0FBUCxFQUFZVyxZQUFaLEVBQUQsS0FFUjtBQUFBO0FBQUE7QUFFSUgsT0FBS0gsR0FBTCxDQUFVLENBQUNPLE1BQUQsRUFBUU4sS0FBUixLQUFrQjtBQUMxQixXQUFPO0FBQUE7QUFBQSxRQUFJLFNBQVUsTUFBTUssYUFBYVgsR0FBYixFQUFpQk0sS0FBakIsQ0FBcEI7QUFBOENNO0FBQTlDLEtBQVA7QUFDRCxHQUZEO0FBRkosQ0FGRjs7QUFhQUMsT0FBTzVCLEdBQVAsR0FBYUEsR0FBYiIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBBcHAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICBcbiAgICAgICAgYm9hcmQ6IFtbMCwwLDAsMCwwLDAsMF0sIFswLDAsMCwwLDAsMCwwXSwgWzAsMCwwLDAsMCwwLDBdLFswLDAsMCwwLDAsMCwwXSwgWzAsMCwwLDAsMCwwLDBdLCBbMCwwLDAsMCwwLDAsMF1dLFxuICAgICAgICBpc0ZpcnN0UGxheWVyOiB0cnVlXG4gICAgICBcbiAgICB9XG4gICAgdGhpcy5vbkNsaWNrID0gdGhpcy5vbkNsaWNrLmJpbmQodGhpcyk7XG4gIH1cblxuICBcbiAgb25DbGljayhjb2wpIHtcbiAgICBjb25zb2xlLmxvZygnY2xpY2tlZCEnLCBjb2wpO1xuICAgIFxuICAgIHZhciBjb3B5Qm9hcmQgPSAgdGhpcy5zdGF0ZS5ib2FyZC5zbGljZSgwKTtcbiAgICB2YXIgcm93ID0gMDtcbiAgICBmb3IgKHZhciBpPTA7IGk8Y29weUJvYXJkLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoY29weUJvYXJkW2ldW2NvbF0gPT09IDApIHtcbiAgICAgICAgcm93ID0gaTtcbiAgICAgIH1cbiAgICB9ICAgIFxuICBcbiAgICBjb3B5Qm9hcmRbcm93XVtjb2xdID0gdGhpcy5zdGF0ZS5pc0ZpcnN0UGxheWVyID8gMSA6IC0xO1xuICAgIGNvbnNvbGUubG9nKGNvcHlCb2FyZCk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGJvYXJkOiAgIGNvcHlCb2FyZCxcbiAgICAgIGlzRmlyc3RQbGF5ZXI6ICF0aGlzLnN0YXRlLmlzRmlyc3RQbGF5ZXJcbiAgICB9KTtcblxuICB9XG5cbiAgcmVuZGVyKCkge1xuXG4gICAgcmV0dXJuICAoXG5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxoMT5DT05ORUNUIDQgVE8gV0lOPC9oMT5cbiAgICAgIFxuICAgICAgICA8dGFibGU+XG4gICAgICAgICAgPHRib2R5PlxuICAgICAgICAgIDxIZWFkZXJzIGRhdGE9e1swLDEsMiwzLDQsNSw2XX0gc2VsZWN0Q29sdW1uPXt0aGlzLm9uQ2xpY2t9IC8+ICAgXG4gICAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZS5ib2FyZC5tYXAoKHJvdywgaW5kZXgpPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gPFJvdyBkYXRhPXtyb3d9IHJvdz17aW5kZXh9IHNlbGVjdFNxdWFyZT17dGhpcy5vbkNsaWNrfSAvPlxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgPC90YWJsZT4gIFxuICAgICAgPC9kaXY+XG5cbiAgICApXG4gIH1cbn1cblxudmFyIEhlYWRlcnMgPSAoe2RhdGEsIHNlbGVjdENvbHVtbn0pID0+ICAoXG5cbiAgPHRyPlxuICAgIHtcbiAgICBcbiAgICAgIGRhdGEubWFwKChyb3csIGluZGV4KSA9PiB7XG4gICAgICAgIHJldHVybiA8dGggb25DbGljaz17ICgpPT4ge3NlbGVjdENvbHVtbihpbmRleCl9fT57aW5kZXgrMX08L3RoPlxuICAgICAgfSlcbiAgICAgIFxuICAgIH1cbiAgPC90cj5cblxuKVxuXG52YXIgUm93ID0gKHtkYXRhLCByb3csIHNlbGVjdFNxdWFyZX0pID0+IChcblxuICA8dHI+XG4gICAge1xuICAgICAgZGF0YS5tYXAoIChzcXVhcmUsaW5kZXgpID0+IHtcbiAgICAgICAgcmV0dXJuIDx0ZCBvbkNsaWNrPXsgKCkgPT4gc2VsZWN0U3F1YXJlKHJvdyxpbmRleCl9PntzcXVhcmV9PC90ZD5cbiAgICAgIH0pXG4gICAgfVxuICA8L3RyPlxuXG4pXG5cblxud2luZG93LkFwcCA9IEFwcDtcbiJdfQ==