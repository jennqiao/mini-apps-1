class App extends React.Component {

  constructor(props) {
    super(props);
    this.state = {

      board: [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]],
      isFirstPlayer: true

    };
    this.onClick = this.onClick.bind(this);
  }

  onClick(row, col) {
    console.log('clicked!', row, col);

    var copyBoard = this.state.board.slice(0);
    copyBoard[row][col] = this.state.isFirstPlayer ? 1 : -1;
    console.log(copyBoard);
    this.setState({
      board: copyBoard,
      isFirstPlayer: !this.state.isFirstPlayer
    });
  }

  render() {

    return React.createElement(
      'div',
      null,
      React.createElement(
        'h1',
        null,
        'CONNECT 4 TO WIN'
      ),
      React.createElement(
        'table',
        null,
        React.createElement(
          'tbody',
          null,
          React.createElement(
            'tr',
            null,
            React.createElement(
              'th',
              null,
              '1'
            ),
            React.createElement(
              'th',
              null,
              '2'
            ),
            React.createElement(
              'th',
              null,
              '3'
            ),
            React.createElement(
              'th',
              null,
              '4'
            ),
            React.createElement(
              'th',
              null,
              '5'
            ),
            React.createElement(
              'th',
              null,
              '6'
            ),
            React.createElement(
              'th',
              null,
              '7'
            )
          ),
          this.state.board.map((row, index) => {
            return React.createElement(Row, { data: row, row: index, selectSquare: this.onClick });
          })
        )
      )
    );
  }
}

var Row = ({ data, row, selectSquare }) => React.createElement(
  'tr',
  null,
  data.map((square, index) => {
    return React.createElement(
      'td',
      { onClick: () => selectSquare(row, index) },
      square
    );
  })
);

window.App = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2FwcC5qc3giXSwibmFtZXMiOlsiQXBwIiwiUmVhY3QiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwic3RhdGUiLCJib2FyZCIsImlzRmlyc3RQbGF5ZXIiLCJvbkNsaWNrIiwiYmluZCIsInJvdyIsImNvbCIsImNvbnNvbGUiLCJsb2ciLCJjb3B5Qm9hcmQiLCJzbGljZSIsInNldFN0YXRlIiwicmVuZGVyIiwibWFwIiwiaW5kZXgiLCJSb3ciLCJkYXRhIiwic2VsZWN0U3F1YXJlIiwic3F1YXJlIiwid2luZG93Il0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxHQUFOLFNBQWtCQyxNQUFNQyxTQUF4QixDQUFrQzs7QUFFaENDLGNBQVlDLEtBQVosRUFBbUI7QUFDakIsVUFBTUEsS0FBTjtBQUNBLFNBQUtDLEtBQUwsR0FBYTs7QUFFVEMsYUFBTyxDQUFDLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxFQUFTLENBQVQsRUFBVyxDQUFYLEVBQWEsQ0FBYixDQUFELEVBQWtCLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxFQUFTLENBQVQsRUFBVyxDQUFYLEVBQWEsQ0FBYixDQUFsQixFQUFtQyxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULEVBQVcsQ0FBWCxFQUFhLENBQWIsQ0FBbkMsRUFBbUQsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLEVBQVMsQ0FBVCxFQUFXLENBQVgsRUFBYSxDQUFiLENBQW5ELEVBQW9FLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxFQUFTLENBQVQsRUFBVyxDQUFYLEVBQWEsQ0FBYixDQUFwRSxFQUFxRixDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULEVBQVcsQ0FBWCxFQUFhLENBQWIsQ0FBckYsQ0FGRTtBQUdUQyxxQkFBZTs7QUFITixLQUFiO0FBTUEsU0FBS0MsT0FBTCxHQUFlLEtBQUtBLE9BQUwsQ0FBYUMsSUFBYixDQUFrQixJQUFsQixDQUFmO0FBQ0Q7O0FBR0RELFVBQVFFLEdBQVIsRUFBWUMsR0FBWixFQUFpQjtBQUNmQyxZQUFRQyxHQUFSLENBQVksVUFBWixFQUF3QkgsR0FBeEIsRUFBNkJDLEdBQTdCOztBQUVBLFFBQUlHLFlBQWEsS0FBS1QsS0FBTCxDQUFXQyxLQUFYLENBQWlCUyxLQUFqQixDQUF1QixDQUF2QixDQUFqQjtBQUNBRCxjQUFVSixHQUFWLEVBQWVDLEdBQWYsSUFBc0IsS0FBS04sS0FBTCxDQUFXRSxhQUFYLEdBQTJCLENBQTNCLEdBQStCLENBQUMsQ0FBdEQ7QUFDQUssWUFBUUMsR0FBUixDQUFZQyxTQUFaO0FBQ0EsU0FBS0UsUUFBTCxDQUFjO0FBQ1pWLGFBQVNRLFNBREc7QUFFWlAscUJBQWUsQ0FBQyxLQUFLRixLQUFMLENBQVdFO0FBRmYsS0FBZDtBQUtEOztBQUVEVSxXQUFTOztBQUVQLFdBRUU7QUFBQTtBQUFBO0FBQ0U7QUFBQTtBQUFBO0FBQUE7QUFBQSxPQURGO0FBR0U7QUFBQTtBQUFBO0FBQ0U7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0U7QUFBQTtBQUFBO0FBQUE7QUFBQSxhQURGO0FBRUU7QUFBQTtBQUFBO0FBQUE7QUFBQSxhQUZGO0FBR0U7QUFBQTtBQUFBO0FBQUE7QUFBQSxhQUhGO0FBSUU7QUFBQTtBQUFBO0FBQUE7QUFBQSxhQUpGO0FBS0U7QUFBQTtBQUFBO0FBQUE7QUFBQSxhQUxGO0FBTUU7QUFBQTtBQUFBO0FBQUE7QUFBQSxhQU5GO0FBT0U7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQVBGLFdBREE7QUFhRSxlQUFLWixLQUFMLENBQVdDLEtBQVgsQ0FBaUJZLEdBQWpCLENBQXFCLENBQUNSLEdBQUQsRUFBTVMsS0FBTixLQUFlO0FBQ2xDLG1CQUFPLG9CQUFDLEdBQUQsSUFBSyxNQUFNVCxHQUFYLEVBQWdCLEtBQUtTLEtBQXJCLEVBQTRCLGNBQWMsS0FBS1gsT0FBL0MsR0FBUDtBQUNELFdBRkQ7QUFiRjtBQURGO0FBSEYsS0FGRjtBQTRCRDtBQXpEK0I7O0FBNERsQyxJQUFJWSxNQUFNLENBQUMsRUFBQ0MsSUFBRCxFQUFPWCxHQUFQLEVBQVlZLFlBQVosRUFBRCxLQUVSO0FBQUE7QUFBQTtBQUVJRCxPQUFLSCxHQUFMLENBQVUsQ0FBQ0ssTUFBRCxFQUFRSixLQUFSLEtBQWtCO0FBQzFCLFdBQU87QUFBQTtBQUFBLFFBQUksU0FBVSxNQUFNRyxhQUFhWixHQUFiLEVBQWlCUyxLQUFqQixDQUFwQjtBQUE4Q0k7QUFBOUMsS0FBUDtBQUNELEdBRkQ7QUFGSixDQUZGOztBQWFBQyxPQUFPeEIsR0FBUCxHQUFhQSxHQUFiIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIEFwcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcylcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgIFxuICAgICAgICBib2FyZDogW1swLDAsMCwwLDAsMCwwXSwgWzAsMCwwLDAsMCwwLDBdLCBbMCwwLDAsMCwwLDAsMF0sWzAsMCwwLDAsMCwwLDBdLCBbMCwwLDAsMCwwLDAsMF0sIFswLDAsMCwwLDAsMCwwXV0sXG4gICAgICAgIGlzRmlyc3RQbGF5ZXI6IHRydWVcbiAgICAgIFxuICAgIH1cbiAgICB0aGlzLm9uQ2xpY2sgPSB0aGlzLm9uQ2xpY2suYmluZCh0aGlzKTtcbiAgfVxuXG4gIFxuICBvbkNsaWNrKHJvdyxjb2wpIHtcbiAgICBjb25zb2xlLmxvZygnY2xpY2tlZCEnLCByb3csIGNvbCk7XG4gIFxuICAgIHZhciBjb3B5Qm9hcmQgPSAgdGhpcy5zdGF0ZS5ib2FyZC5zbGljZSgwKTtcbiAgICBjb3B5Qm9hcmRbcm93XVtjb2xdID0gdGhpcy5zdGF0ZS5pc0ZpcnN0UGxheWVyID8gMSA6IC0xO1xuICAgIGNvbnNvbGUubG9nKGNvcHlCb2FyZCk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBib2FyZDogICBjb3B5Qm9hcmQsXG4gICAgICBpc0ZpcnN0UGxheWVyOiAhdGhpcy5zdGF0ZS5pc0ZpcnN0UGxheWVyXG4gICAgfSk7XG5cbiAgfVxuXG4gIHJlbmRlcigpIHtcblxuICAgIHJldHVybiAgKFxuXG4gICAgICA8ZGl2PlxuICAgICAgICA8aDE+Q09OTkVDVCA0IFRPIFdJTjwvaDE+XG4gICAgICBcbiAgICAgICAgPHRhYmxlPlxuICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICA8dHI+XG4gICAgICAgICAgICA8dGg+MTwvdGg+XG4gICAgICAgICAgICA8dGg+MjwvdGg+XG4gICAgICAgICAgICA8dGg+MzwvdGg+XG4gICAgICAgICAgICA8dGg+NDwvdGg+XG4gICAgICAgICAgICA8dGg+NTwvdGg+XG4gICAgICAgICAgICA8dGg+NjwvdGg+XG4gICAgICAgICAgICA8dGg+NzwvdGg+XG5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICAgIFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuYm9hcmQubWFwKChyb3csIGluZGV4KT0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIDxSb3cgZGF0YT17cm93fSByb3c9e2luZGV4fSBzZWxlY3RTcXVhcmU9e3RoaXMub25DbGlja30gLz5cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgIDwvdGFibGU+ICBcbiAgICAgIDwvZGl2PlxuXG4gICAgKVxuICB9XG59XG5cbnZhciBSb3cgPSAoe2RhdGEsIHJvdywgc2VsZWN0U3F1YXJlfSkgPT4gKFxuXG4gIDx0cj5cbiAgICB7XG4gICAgICBkYXRhLm1hcCggKHNxdWFyZSxpbmRleCkgPT4ge1xuICAgICAgICByZXR1cm4gPHRkIG9uQ2xpY2s9eyAoKSA9PiBzZWxlY3RTcXVhcmUocm93LGluZGV4KX0+e3NxdWFyZX08L3RkPlxuICAgICAgfSlcbiAgICB9XG4gIDwvdHI+XG5cbilcblxuXG53aW5kb3cuQXBwID0gQXBwO1xuIl19